H2SL (Human 2 Structured Language) provides the source code for a set
of libraries and executables that convert free-form text input to its
corresponding structured language instance.

Copyright (C) 2014 by the Massachusetts Institute of Technology

Developed by Thomas M. Howard and Matthew R. Walter at the Computer
Science and Artificial Intelligence Laboratory, MIT, Cambridge,
Massachusetts USA, with partial support from the U.S. Army Research
Laboratory under the Robotics Collaborative Technology Alliance,
Cooperative Agreement W911NF-10-2-0016.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, see
<http://www.gnu.org/licenses/gpl-2.0.html> or write to the Free
Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
02110-1301, USA.

OVERVIEW

h2sl provides a set of base classes for developing a natural language
symbol grounding inferface.  Example symbols, features, and data is 
provided, but is not intended to serve as a drop-in natural language
interface for robotic system.  To adapt to new applications, one can
replace the symbols, features, and examples with those that are 
relevant to your system and domain.

TUTORIAL 

To run the DCG model

To generate a symbol dictionary for the example corpus, run the following command from the build directory:

./bin/h2sl-generate-symbol-dictionary ../data/training/example_corpus/example_00*.xml --output ../data/training/example_corpus/symbol_dictionary_groundings.xml

To generate a feature set for the example corpus using the just generated symbol dictionary, run the following command from the build directory:

./bin/h2sl-generate-feature-set-groundings ../data/training/example_corpus/example_00*.xml --symbol_dictionary ../data/training/example_corpus/symbol_dictionary_groundings.xml --output ../data/training/example_corpus/feature_set_dcg.xml

To train a model using the just generated symbol dictionary and feature set, run the following command from the build directory:

./bin/h2sl-llm-train-groundings ../data/training/example_corpus/example_00*.xml --feature_set ../data/training/example_corpus/feature_set_dcg.xml --symbol_dictionary_groundings ../data/training/example_corpus/symbol_dictionary_groundings.xml --output ../data/training/example_corpus/llm_dcg.xml

To run the DCG demo program run the following command from the build directory.

./bin/h2sl-dcg-demo --grammar ../data/grammar/grammar.xml --command "walk to the furthest chair" --symbol_dictionary ../data/training/example_corpus/symbol_dictionary_groundings.xml --world ../data/training/example_corpus/example_0034.xml --llm ../data/training/example_corpus/llm_dcg.xml --output /tmp/example_dcg.xml --debug 1

To run the DCG test, run the following command from the build directory:

./bin/h2sl-dcg-test ../data/training/example_corpus/example_00*.xml --llm ../data/training/example_corpus/llm_dcg.xml --grammar ../data/grammar/grammar.xml --symbol_dictionary_groundings ../data/training/example_corpus/symbol_dictionary_groundings.xml

To run the Graphical User Interface (GUI), run the following command from the build directory:

./bin/h2sl-gui-demo --world ../data/training/example_corpus/example_0001.xml --llm ../data/training/example_corpus/llm_dcg.xml --symbol_dictionary_groundings ../data/training/example_corpus/symbol_dictionary_groundings.xml --grammar ../data/grammar/grammar.xml 



To run the HDCG model

First, generate the rule examples by running the following command from the build directory.  This generates examples with the "rule_" prefix and rule-based symbols.

./bin/h2sl-generate-rule-examples ../data/training/example_corpus/example_00*.xml

Second, generate the symbol dictionary for the groundings by running the following command from the build directory.  This describes the space of symbols in the grounding-based model.

./bin/h2sl-generate-symbol-dictionary ../data/training/example_corpus/example_00*.xml --output ../data/training/example_corpus/symbol_dictionary_groundings.xml

Third, generate the symbol dictionary for the rules by running the following command from the build directory.  This describes the space of symbols in the rule-based model.

./bin/h2sl-generate-symbol-dictionary ../data/training/example_corpus/rule_example_00*.xml --output ../data/training/example_corpus/symbol_dictionary_rules.xml

Next, generate the feature set from the examples and symbol dictionaries by running the following command from the build directory.  This will create the feature set for the log-linear model you will train in the following step.

./bin/h2sl-generate-feature-set-groundings-and-rules ../data/training/example_corpus/example_00*.xml ../data/training/example_corpus/rule_example_00*.xml --symbol_dictionary_groundings ../data/training/example_corpus/symbol_dictionary_groundings.xml --symbol_dictionary_rules ../data/training/example_corpus/symbol_dictionary_rules.xml --output ../data/training/example_corpus/feature_set_hdcg.xml

Now train the combined model by running the following command from the build directory.  This will produce a llm.xml file that contains the trained log-linear models.

./bin/h2sl-llm-train-groundings-and-rules ../data/training/example_corpus/example_00*.xml ../data/training/example_corpus/rule_example_00*.xml --feature_set ../data/training/example_corpus/feature_set_hdcg.xml --symbol_dictionary_groundings ../data/training/example_corpus/symbol_dictionary_groundings.xml --symbol_dictionary_rules ../data/training/example_corpus/symbol_dictionary_rules.xml --output ../data/training/example_corpus/llm_hdcg.xml

Finally, to run the HDCG demo program run the following command from the build directory.

./bin/h2sl-hdcg-demo --grammar ../data/grammar/grammar.xml --command "walk to the box" --symbol_dictionary ../data/training/example_corpus/symbol_dictionary_groundings.xml --world ../data/training/example_corpus/example_0001.xml --llm ../data/training/example_corpus/llm_hdcg.xml --output /tmp/example_hdcg.xml --debug 1

To run the HDCG test, run the following command from the build directory

./bin/h2sl-hdcg-test ../data/training/example_corpus/example_00*.xml --grammar ../data/grammar/grammar.xml --llm ../data/training/example_corpus/llm_hdcg.xml --symbol_dictionary ../data/training/example_corpus/symbol_dictionary_groundings.xml



To run the ADCG model

First, generate the symbol dictionary for the groundings by running the following command from the build directory.  This describes the space of symbols in the grounding-based model.

./bin/h2sl-generate-symbol-dictionary ../data/training/example_corpus/example_00*.xml --output ../data/training/example_corpus/symbol_dictionary_groundings.xml

Next, generate the feature set from the examples and symbol dictionaries by running the following command from the build directory.  This will create the feature set for the log-linear model you will train in the following step.

./bin/h2sl-generate-feature-set-groundings ../data/training/example_corpus/example_00*.xml --symbol_dictionary_groundings ../data/training/example_corpus/symbol_dictionary_groundings.xml --output ../data/training/example_corpus/feature_set_adcg.xml

Now train the model by running the following command from the build directory.  This will produce a llm_adcg.xml file that contains the trained log-linear models.

./bin/h2sl-llm-train-groundings ../data/training/example_corpus/example_00*.xml --feature_set ../data/training/example_corpus/feature_set_adcg.xml --symbol_dictionary_groundings ../data/training/example_corpus/symbol_dictionary_groundings.xml --output ../data/training/example_corpus/llm_adcg.xml

Finally, to run the ADCG demo program run the following command from the build directory.

./bin/h2sl-adcg-demo --grammar ../data/grammar/grammar.xml --command "walk to the furthest chair" --symbol_dictionary ../data/training/example_corpus/symbol_dictionary_groundings.xml --world ../data/training/example_corpus/example_0034.xml --llm ../data/training/example_corpus/llm_adcg.xml --output /tmp/example_adcg.xml --debug 1

